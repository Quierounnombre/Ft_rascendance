import { CanvasObject } from "./CanvasObject.js";
import { Counter } from "./Counter.js";
import { Ball } from "./Ball.js";
import { Player } from "./Player.js";
"use strict";

class Game {
/**
 * @param {JSON array} objs array generated by parsing the JSON with the config file
 */
constructor(objs) {	
	this.canvas = document.getElementById("pong"); // TODO: pong o game? elegir nombre
	this.context = canvas.getContext("2d");
	this.game_objects = [];

	// TODO: valores por defecto a los valores que extraerÃ¡ de config
	this.background_color = "black";
	this.object_color = "white";
	this.timeout = 180;
	this.points = 5;

	for (let i in objs) {
		switch (objs[i].type) {
		case "config":
			for(let j in objs[i])
				this[j] = objs[i][j];
			break;
		case "player":
			game_objects.push(new Player(objs[i], canvas, context));
			break;
		case "ball":
			game_objects.push(new Ball(objs[i], canvas, context));
			break;
		case "counter":
			game_objects.push(new Counter(objs[i], canvas, context));
			break;
		default:
			game_objects.push(new CanvasObject(objs[i], canvas, context));
		}
	}

	this.counter = game_objects.filter((obj) => obj.type === "counter");
	game_objects.filter((obj) => obj.type === "ball")
	            .forEach((obj) => obj.counter = this.counter);

	// TODO: sacar color jugadores 1 y 2. Que cada jugador pueda jugar con los colores que desee
	// esto no iria en el json que genera la sala?
}

/**
 * @brief game loop
 */
gameLoop() {
	this.drawBackground();

	for (let i in this.game_objects) {
		this.game_objects[i].update(this.game_objects);
		this.game_objects[i].render();
		this.game_objects[i].renderHitBox();
	}

	if (!this.isEnd())
		window.requestAnimationFrame(this.gameLoop);
}

/**
 * @brief clears all the canvas to get only the background
 */
drawBackground() {
	// Clear the canvas
	this.context.fillStyle = this.background_color;
	this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);

	// Draw the center line
	this.context.beginPath();
	this.context.strokeStyle = this.object_color;
	this.context.lineWidth = "2";
	this.context.moveTo(this.canvas.width / 2, 0);
	this.context.lineTo(this.canvas.width / 2, this.canvas.height);
	this.context.closePath();
	this.context.stroke();
}

isEnd() {
// TODO: comprobar puntuacion
// TODO: comprobar tiempo
}

}