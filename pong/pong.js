import { Player } from "./Player.js"
import { Ball } from "./Ball.js"
import { Counter } from "./Counter.js"
import { CanvasObject } from "./CanvasObject.js";

const g_canvas = document.getElementById("pong");
const g_context = g_canvas.getContext("2d");

// document.addEventListener("keyup", keyUpHandler);
// document.addEventListener("keydown", keyDownHandler);

const OBJECT_COLOR     = "white";
const BACKGROUND_COLOR = "black";

const tmp = JSON.parse(`[{"id":"counter","type":"counter","x":400,"y":10,"font":"42px Arial"},{"id":"player1","type":"player","x":10,"y":200,"width":20,"height":100,"speed":2,"move_up":"w","move_down":"s"},{"id":"player2","type":"player","x":790,"y":200,"width":20,"height":100,"speed":2,"move_up":"ArrowUp","move_down":"ArrowDown"},{"id":"ball","type":"ball","x":400,"y":200,"dirX":-1,"dirY":0,"is_moving":true,"radius":10}]`);
const canvas_objects = objectsGenerator(tmp);

/**
 * @brief generates an array with the canvas objects from the parsed JSON
 * @param {JSON array} objs array with the objects generated by JSON.parse()
 */
function objectsGenerator(old_objs) {
	// TODO: quizas habria que moverlo a un archivo aparte y pasarle el canvas y el context como argumentos
	const new_objs = [];
	let tmp_obj;

	for (let i in old_objs) {
		switch (old_objs[i].type) {
		case "player":
			tmp_obj = new Player(old_objs[i], g_canvas, g_context);
			break;
		case "ball":
			tmp_obj = new Ball(old_objs[i], g_canvas, g_context);
			break;
		case "counter":
			tmp_obj = new Counter(old_objs[i], g_canvas, g_context);
			break;
		default:
			tmp_obj = new CanvasObject(old_objs[i], g_canvas, g_context);
		}
		// tmp_obj.canvas = g_canvas;
		// tmp_obj.context = g_context;
		new_objs.push(tmp_obj);
	}

	// TODO: hacer que todas las ball hagan referencia a un counter
	const counter_index = new_objs.map((obj) => obj.type).indexOf("counter");
	new_objs.forEach((obj) => {
		if (obj.type === "ball")
			obj.counter = new_objs[counter_index];

	})

	return new_objs;
}

function keyUpHandler(event) {
	// TODO: esto es asumiendo que siempre hay dos jugadores, y ambos en local
	// TODO: de momento no funciona
	if (event.key === "ArrowUp" || event.key === "ArrowDown") {
		 player2.is_moving = false;
	}
	else if (event.key === "w" || event.key === "s") {
		player1.is_moving = false;
	}
}

function keyDownHandler(e) {
	// TODO: esto es asumiendo que siempre hay dos jugadores, y ambos en local
	// TODO: de momento no funciona
	if (e.key === "ArrowUp") {
		player2.dirY = -2;
		player2.is_moving = true;
	}
	else if (e.key === "ArrowDown") {
		player2.dirY = 2;
		player2.is_moving = true;
	}
	else if (e.key === "w") {
		player1.dirY = -2;
		player1.is_moving = true;
	}
	else if (e.key === "s") {
		player1.dirY = 2;
		player1.is_moving = true;
	}
}

function game_loop() {
	// Clear the canvas ----------------------------------------------------
	g_context.fillStyle = BACKGROUND_COLOR;
	g_context.fillRect(0, 0, g_canvas.width, g_canvas.height);
	// ---------------------------------------------------------------------

	// Draw the center line ------------------------------------------------
	g_context.beginPath();
	g_context.strokeStyle = OBJECT_COLOR;
	g_context.lineWidth = "2";
	g_context.moveTo(g_canvas.width / 2, 0);
	g_context.lineTo(g_canvas.width / 2, g_canvas.height);
	g_context.closePath();
	g_context.stroke();
	// ---------------------------------------------------------------------

	for (let i = 0; i < canvas_objects.length; i++) {
		canvas_objects[i].update(canvas_objects); // TODO: antes o despues de render?
		canvas_objects[i].render();
		canvas_objects[i].renderHitBox();
	}

	// TODO: esto es debug, borrar------------------------------------------
	// g_context.beginPath();
	// g_context.strokeStyle = "magenta";
	// g_context.moveTo(0, 0);
	// g_context.lineTo(g_canvas.width, g_canvas.height);
	// g_context.moveTo(g_canvas.width, 0);
	// g_context.lineTo(0, g_canvas.height);
	// g_context.moveTo(0, g_canvas.height / 2);
	// g_context.lineTo(g_canvas.width, g_canvas.height / 2);
	// g_context.moveTo(g_canvas.width / 2, 0);
	// g_context.lineTo(g_canvas.width / 2, g_canvas.height);
	// g_context.closePath();
	// g_context.stroke()
	// ---------------------------------------------------------------------

	window.requestAnimationFrame(game_loop);
}

function main() {
	// TODO: check end of game condition
	window.requestAnimationFrame(game_loop);
}

main();
