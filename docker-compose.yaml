services:

  # template: 
  #   build:
  #     context: PATH_TO_DIR
  #   container_name: ${DJ_CONTAINER_NAME}
  #   env_file:
  #     - .env
  #   depends_on:
  #     - db
  #   networks:
  #     - rascendance-network
  #   ports:
  #     - ${BACKEND_PORT}:${BACKEND_PORT}
  #   expose:
  #     - ${POSTGRES_PORT}
  #   volumes:
  #     - ./PATH_TO_DIR/code:/code
  #   command: python /code/manage.py runserver 0.0.0.0:${BACKEND_PORT}
  # nginx:
  #  image: nginx:latest 
  #  container_name: ${NGINX_CONTAINER_NAME}
  #  env_file:
  #    - .env
  #  depends_on:
  #    - db

#Nginx

#  nginx:
#    build:
#      context: nginx-files 
#    container_name: ${NGINX_CONTAINER_NAME}
#    env_file:
#      - .env
#    depends_on:
#      - websocket
#      - usermng
#      - twofactorauth
#    volumes:
#      - ./nginx-files/static-files:/etc/nginx/html
#    ports:
#      - ${NGINX_EXTERNAL_PORT}:${NGINX_INTERNAL_PORT}
#    networks:
#      - websocket-network
#      - rascendance-network
#      - twofactorauth-network

#UserMng

  user_db:
    restart: always
    image: postgres:latest
    container_name: ${DB_CONTAINER_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - ${POSTGRES_PORT}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      PGUSER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - rascendance-network
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}"]
      retries: 10
      timeout: 3s
      interval: 1s

  usermng:
    restart: always
    build:
      context: ./UserMng
      dockerfile: Dockerfile
    container_name: UserMng
    expose:
      - ${BACKEND_PORT}
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    volumes:
      - ./UserMng/code:/UserMng/code
    depends_on:
      user_db:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_HOST: ${DB_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      DJANGO_SUPERUSER: ${DJANGO_SUPERUSER}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      API_UID: ${API_UID}
      API_SECRET: ${API_SECRET}
    networks:
      - rascendance-network

#websocket

  websocket: 
    build:
      context: websocket
    container_name: ${WEBSOCKET_NAME}
    env_file:
      - .env
    depends_on:
      web-db:
        condition: service_healthy
    networks:
      - websocket-network
    expose:
      - ${WEBSOCKET_PORT}
    volumes:
      - ./websocket/code:/code
    command: python /code/manage.py runserver 0.0.0.0:${WEBSOCKET_PORT}

  redis:
    image: redis
    command: --port ${WS_REDIS_PORT}
    container_name: redis
    expose:
      -  ${WS_REDIS_PORT}
    networks:
      - websocket-network

  web-db:
    restart: always
    image: postgres:latest
    container_name: ${WS_DATABASE_NAME}
    volumes:
      - websocket_data:/var/lib/postgresql/data
    expose:
      - ${WS_DATABASE_PORT}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
    networks:
      - websocket-network
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}"]
      retries: 10
      timeout: 3s
      interval: 1s

#TwoFactorAuth

  twofactorauth_db:
    restart: always
    image: postgres:latest
    container_name: ${TwoFactorAuth_DB_NAME}
    volumes:
      - TwoFactorAuth_data:/var/lib/postgressql/data
    expose:
      - ${TwoFactorAuth_DB_PORT}
    environment:
      POSTGRES_USER : ${TwoFactorAuth_POSTGRES_USER}
      PGUSER: ${TwoFactorAuth_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TwoFactorAuth_POSTGRESS_PASSWORD}
      POSTGRES_DB: ${TwoFactorAuth_DB}
    networks:
      - twofactorauth-network
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${TwoFactorAuth_DB}"]
      retries: 10
      timeout: 3s
      interval: 1s

  twofactorauth:
    restart: always
    build:
      context: ./TwoFactorAuth
      dockerfile: Dockerfile
    container_name: TwoFactorAuth
    expose:
      - ${TwoFactorAuth_PORT}
    ports:
      - ${TwoFactorAuth_PORT}:${TwoFactorAuth_PORT}
    volumes:
      - ./TwoFactorAuth/code:/TwoFactorAuth/code
    depends_on:
      user_db:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${TwoFactorAuth_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TwoFactorAuth_POSTGRESS_PASSWORD}
      POSTGRES_DB: ${TwoFactorAuth_DB}
      POSTGRES_PORT: ${TwoFactorAuth_DB_PORT}
      DJANGO_ALLOWED_HOSTS: ${TwoFactorAuth_ALLOWED_HOSTS}
      DJANGO_SECRET_KEY: ${TwoFactorAuth_SECRET_KEY}
      DEBUG: ${DEBUG}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_HOST: ${TwoFactorAuth_HOST}
      BACKEND_PORT: ${TwoFactorAuth_PORT}
      DJANGO_SUPERUSER_PASSWORD: ${TwoFactorAuth_SUPERUSER_PASSWORD}
      DJANGO_SUPERUSER: ${TwoFactorAuth_SUPERUSER}
      DJANGO_SUPERUSER_EMAIL: ${TwoFactorAuth_SUPERUSER_EMAIL}
      EMAIL: ${EMAIL}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_APP_PASSWORD: ${EMAIL_APP_PASSWORD}
    networks:
      - twofactorauth-network
      - rascendance-network

volumes:
  postgres_data:
    name: postgres_data
  websocket_data:
    name: websocket_data
  TwoFactorAuth_data:
    name: TwoFactorAuth_data

networks:
  rascendance-network:
    driver: bridge
  websocket-network:
    driver: bridge
  twofactorauth-network:
    driver: bridge
